#print("computer cards ",computer)
x = input("press any key to start") 
print("money collecting")


print("card suffling")

def rand():
    import random
    seq = ("A",2,3,4,"J",5,6,7,"Q",8,9,10,"K")
    return random.choices(seq,k=3)
computer =rand()
user = rand()


number = [1,2,3,4,5,6,7,8,9,10]
alpha = ["A","K","Q","J"]
rescomint = []
rescomalp = []
resuseint = []
resusealp = []
for num in computer:
    if num in number:
        rescomint.append(num)
        

for alp in computer:
    if alp in alpha:
        rescomalp.append(alp)
        
        
for num in user:
    if num in number:
        resuseint.append(num)
        

for alp in user:
    if alp in alpha:
        resusealp.append(alp)       
        
        
#print("integer of computer cards",rescomint)
#print("aplhabet of computer cards",rescomalp)
#print("integer of user cards",resuseint)
#print("aplhabet of user card",resusealp)        




sum_rescomint = 0
sum_resuseint = 0
com_flag = 0
user_flag = 0
countcom = 0
countuse = 0
for n in rescomint:
     sum_rescomint  = sum_rescomint +n   
        
for n in resuseint:
    sum_resuseint = sum_resuseint +n
    
    
    
    
    
for n in rescomalp:
    if n == "A" :
        countcom = countcom + 1

for n in resusealp:
    if n == "A" :
        countuse = countuse + 1 
    
sum_rescomint = sum_rescomint + countcom
sum_resuseint = sum_resuseint + countuse
#print("total of computer integer cards",sum_rescomint)
#print("total of user integer cards",sum_resuseint)    


str_sum_rescomint = str(sum_rescomint)
str_sum_resuseint = str(sum_resuseint)

#print(alpha)

if computer[0] == computer[1] == computer[2] and user[0] == user[1] == user[2]:
    if computer[0] in alpha and user[0] in aplha:
        if computer[0] == "A" and user[0] == "A":
            com_flag = com_flag + 1
            user_flag = user_flag +1
        
        elif computer[0] == "A" and user[0] =="K":
            com_flag = com_flag + 1
        
        elif computer[0] == "A" and user[0] == "Q":
            com_flag = com_flag + 1
            
       
        elif computer[0] == "A" and user[0] == "J":
            com_flag = com_flag + 1
        
        elif computer[0] == "K" and user[0] == "Q":
            com_flag = com_flag + 1
            
        elif computer[0] == "K" and user[0] == "K":
            com_flag = com_flag + 1
            user_flag = user_flag + 1
        
        elif computer[0] == "K" and user[0] == "A":
            user_flag = user_flag + 1
            
        elif computer[0] == "K" and user[0] == "J":
            com_flag = com_flag + 1
            
        elif computer[0] == "J" and user[0] == "j":
            user_flag = user_flag + 1
            com_flag = com_flag + 1
        
        elif computer[0] == "J" and user[0] == "K":
            user_flag = user_flag + 1
            
        elif computer[0] == "J" and user[0] == "Q":
            user_flag = user_flag + 1
            
        elif computer[0] == "J" and user[0] == "A":
            user_flag = user_flag + 1
            
        elif computer[0] == "Q" and user[0] == "Q":
            user_flag = user_flag + 1
            com_flag = com_flag + 1
        
        elif computer[0] == "Q" and user[0] == "K":
            user_flag = user_flag + 1
            
        elif computer[0] == "Q" and user[0] == "J":
            com_flag = com_flag + 1
            
        elif computer[0] == "Q" and user[0] == "A":
            user_flag = user_flag + 1    
    
    elif computer[0] in number and user[0] in number :
        if computer[0] > user[0]:
            com_flag = com_flag + 1
                
        elif computer[0] == user[0]:
            com_flag = com_flag + 1
            user_flag = user_flag + 1
            
        elif computer[0] < user[0]:
            user_flag = user_flag +1
    
    
    elif computer[0] in number and user[0] in alpha:
            user_flag = user_flag + 1
    
    elif computer[0] in alpha and user[0] in number:    
             com_flag = com_flag + 1
                
                
                
elif computer[0] == computer[1] == computer[2] and user[0] != user[1] != user[2] or computer[0] == computer[1] == computer[2] and user[0] != user[1] == user[2] or computer[0] == computer[1] == computer[2] and user[0] == user[1] != user[2] or computer[0] == computer[1] == computer[2] and user[0] == user[2] != user[1]:
    com_flag = com_flag + 1
    
elif user[0] == user[1] == user[2] and computer[0] != computer[1] != computer[2] or user[0] == user[1] == user[2] and computer[0] != computer[1] == computer[2] or user[0] == user[1] == user[2] and computer[0] == computer[1] != computer[2] or user[0] == user[1] == user[2] and computer[0] == computer[2] != computer[1]:
    user_flag = user_flag + 1
            

        
elif computer[0] in alpha and computer[1] in alpha and computer[2] in alpha:
    alpha = ["J","Q","k"]
    print(alpha)
    com_flag = com_flag + 1
    
    
elif user[0] in alpha and user[1] in alpha and user[2] in alpha:
    alpha = ["J","Q","k"]
    print(alpha)
    user_flag = user_flag + 1
    
    
else :
    if str_sum_rescomint[-1] > str_sum_resuseint[-1]:
        com_flag = com_flag + 1

    elif str_sum_rescomint[-1] < str_sum_resuseint[-1]:
        user_flag = user_flag + 1
    
    elif str_sum_rescomint[-1] == str_sum_resuseint[-1]: 
        if len(rescomalp) == 0 and len(resusealp) ==0 :
            
            mx_rescomint=max(rescomint[0],rescomint[1])
            com_secondmax=min(rescomint[0],rescomint[1])
            n =len(rescomint)
            for i in range(2,n):
                if rescomint[i]>mx:
                    com_secondmax=mx
                    mx=rescomint[i]
                elif rescomint[i]>com_secondmax and mx != rescomint[i]:
                    com_secondmax=rescomint[i]
            max_rescomint = [mx_rescomint,com_secondmax]
            print(max_rescomint)        
            
            mx_resuseint=max(resuseint[0],resuseint[1])
            user_secondmax=min(resuseint[0],resuseint[1])
            n =len(resuseint)
            for i in range(2,n):
                if resuseint[i]>mx:
                    user_secondmax=mx
                    mx=resuseint[i]
                elif resuseint[i]>com_secondmax and mx != resuseint[i]:
                    user_secondmax=resuseint[i]
            max_resuseint = [mx_resuseint,user_secondmax]
            print(max_resuseint)
            
            if mx_rescomint > mx_resuseint:
                com_flag = com_flag + 1
            elif mx_rescomint < mx_resuseint:
                user_flag = user_flag + 1
            elif mx_rescomint == mx_resuseint:
                if com_secondmax > user_secondmax :
                    com_flag = com_flag + 1
                elif com_secondmax < user_secondmax :
                    user_flag = user_flag + 1
                else:
                    user_flag = user_flag + 1
                    com_flag = com_flag + 1
            
        else:    
            for n in rescomalp:
                for m in resusealp:
                    if n == "K" and m =="Q":
                        com_flag = com_flag +1
            
                    elif n == "K" and m == "K":
                        rescomalp.remove(n)
                        resusealp.remove(m)
                        user_flag = 0
                        com_flag = 0
                        if len(rescomalp) == 0:
                            user_flag = user_flag + 1
                        else:
                            com_flag = com_flag +1
    
                    elif n == "Q" and m == "Q":
                        rescomalp.remove(n)
                        resusealp.remove(m)
                        user_flag = 0
                        com_flag = 0
                        if len(rescomalp) == 0:
                            user_flag = user_flag + 1
                        else:
                            com_flag = com_flag +1
                    
                    elif n =="K" and m == "J":
                        com_flag = com_flag + 1
            
                    elif n == "J" and m == "K":
                        user_flag = user_flag + 1
                
                    elif n == "J" and m == "Q":
                        user_flag = user_flag + 1
                
                    elif n == "Q" and m == "K":
                        user_flag = user_flag + 1
                
                    elif n == "Q" and m == "J":
                        com_flag = com_flag + 1
                    elif n == "J" and m == "J":
                        rescomalp.remove(n)
                        resusealp.remove(m)
                        user_flag = 0
                        com_flag = 0
                        if len(rescomalp) == 0:
                            user_flag = user_flag + 1
                        else:
                            com_flag = com_flag +1
                
                    
x = int(input("press 1 for playing blind and press 0 for seen "))

if x == 0:
    print("user card",user)
      
if x == 1:
    
    x = int(input("press 0 for show and 1 for pack"))
    
    print("computer cards ",computer)
    print("user card",user)
    #print(rescomalp)
    #print(resusealp)
    if com_flag > user_flag :
        print("computer wins")
    #rint("computer wins with",com_flag,"com_flag")
    #print("computer cards ",computer) 
    if com_flag < user_flag :
        print("user wins")
    #rint("user wins with",user_flag,"user_flag")
    #print("user card",user)      
    if com_flag == user_flag:
        print("same cards")

if x == 0:
    print("computer cards ",computer)
    #print(rescomalp)
    #print(resusealp)
    if com_flag > user_flag :
        print("computer wins")
    #rint("computer wins with",com_flag,"com_flag")
    #print("computer cards ",computer) 
    if com_flag < user_flag :
        print("user wins")
    #rint("user wins with",user_flag,"user_flag")
    #print("user card",user)      
    if com_flag == user_flag:
        print("same cards")
if x == 1:
    print("successfully pack")
    
